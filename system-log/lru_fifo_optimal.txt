***LRU


import java.util.*;

public class lru {
	static Scanner scanner = new Scanner(System.in);

	public void LruImplementation(int pages[], int capacity) {
		int pageFaults = 0;
		HashMap<Integer, Integer> map = new HashMap();
		HashSet<Integer> currentSet = new HashSet();

		for(int i = 0 ; i < pages.length; i++) {

			if(currentSet.size() < capacity) {
				if(!currentSet.contains(pages[i])) {
					currentSet.add(pages[i]);
					pageFaults++;
				}
				map.put(pages[i],i);
			}
			else {
				if(!currentSet.contains(pages[i])) {

					Iterator<Integer> it = currentSet.iterator();
					int lru = Integer.MAX_VALUE;
					int val = 0;
					while(it.hasNext()) {
						int temp = it.next();
						if(map.get(temp) < lru) {
							lru = map.get(temp);
							val = temp;
						}
					}
					currentSet.remove(val);
					map.remove(val);
					currentSet.add(pages[i]);
					pageFaults++;
				}
				map.put(pages[i],i);
			}
		}
		System.out.println("Page Faults: "+pageFaults);
		int pageHits = pages.length - pageFaults;
		System.out.println("Page Hits: "+pageHits);
		System.out.println("Hit Ratio: "+pageHits + "/" + pages.length + " = " + (double)pageHits/pages.length);
	}

	public static void main(String[] args) {
		int capacity, n, pages[];
		// int pages[] = {1, 2, 3, 4, 2, 1, 5, 6, 2, 1, 2, 3, 7, 6, 3, 2, 1, 2, 3, 6};
		lru lru = new lru();

		System.out.print("Enter capacity of page frame: ");	
		capacity = scanner.nextInt();

		System.out.print("Enter number of page sequence: ");
		n = scanner.nextInt();

		pages = new int[n];

		System.out.print("Enter values (space separated): ");
		for(int i = 0 ; i < n ; i++) {
			pages[i] = scanner.nextInt();
		}

		lru.LruImplementation(pages, capacity);

	}	
}




***fifo
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;


class fifo
{
    static int pageFaults(int incomingStream[], int n, int frames)
    {
        System.out.println("Incoming \t Pages");
        // Using Hashset to quickly check if a given
        // incoming stream item in set or not
        HashSet s = new HashSet<>(frames);

        // Queue created to store pages in FIFO manner
        // since set will not store order or entry
        // we will use queue to note order of entry of incoming page
        Queue queue = new LinkedList<>();

        int page_faults = 0;

        for (int i=0; i < n; i++)
        {
            // if set has lesser item than frames
            if (s.size() < frames)
            {
                // If incoming item is not present, add to set
                if (!s.contains(incomingStream[i]))
                {
                    s.add(incomingStream[i]);
                    page_faults++;

                    // Push the incoming page into the queue
                    queue.add(incomingStream[i]);


                }
            }

            // If the set is full then we need to do page replacement
            // in FIFO manner that is remove first item from both
            // set and queue then insert incoming page
            else
            {
                // If incoming item is not present
                if (!s.contains(incomingStream[i]))
                {
                    // remove the first page from the queue
                    int val = (int) queue.peek();

                    // remove from queue
                    queue.poll();

                    // Remove from set
                    s.remove(val);

                    // insert incoming page to set
                    s.add(incomingStream[i]);

                    // push incoming page to queue
                    queue.add(incomingStream[i]);
                    page_faults++;


                }
            }
            // printing happens here
            System.out.print(incomingStream[i] + "\t");
            System.out.print(queue + " \n");
        }


        return page_faults;
    }

    public static void main(String args[])
    {
        int incomingStream[] = {7, 0, 1, 2, 0 , 3, 0, 4, 2, 3, 0, 3, 2, 1};
        int frames = 3;

        int len = incomingStream.length;
        int pageFaults = pageFaults(incomingStream, len, frames);
        int hit = len - pageFaults;

        System.out.println("Page faults: " + pageFaults);
        System.out.println("Page fault Ratio: " + (double) pageFaults/len);
        System.out.println("Hits: " + hit);
        System.out.println("Hit Ratio : " + (double) hit/len);
    }
}


***optimal
import java.util.*;

public class Optimal {
    static Scanner scanner = new Scanner(System.in);

    private int predict(int pages[],HashSet<Integer> currentSet,int index) {

        Iterator<Integer> it = currentSet.iterator();
        int val = -1;
        int farthestIndex = index-1;
        while(it.hasNext()) {
            int temp = it.next();
            int i;
            for(i = index; i < pages.length; i++) {
                if(pages[i] == temp) {
                    if(i > farthestIndex) {
                        farthestIndex = i;
                        val = temp;
                    }
                    break;
                }
            }
            if(i == pages.length)
                return temp;
        }
        return val;
    }

    public void OptimalImplementation(int pages[], int capacity) {
        int pageFaults = 0;
        HashMap<Integer, Integer> map = new HashMap();
        HashSet<Integer> currentSet = new HashSet();

        for(int i = 0 ; i < pages.length; i++) {

            if(currentSet.size() < capacity) {
                if(!currentSet.contains(pages[i])) {
                    currentSet.add(pages[i]);
                    pageFaults++;
                }
            }
            else {
                if(!currentSet.contains(pages[i])) {
                    int predictedElement = predict(pages,currentSet,i+1);
                    currentSet.remove(predictedElement);
                    currentSet.add(pages[i]);
                    pageFaults++;
                }
            }
        }
        System.out.println("Page Faults: "+pageFaults);
        int pageHits = pages.length - pageFaults;
        System.out.println("Page Hits: "+pageHits);
        System.out.println("Hit Ratio: "+pageHits + "/" + pages.length + " = " + (double)pageHits/pages.length);
    }

    public static void main(String[] args) {
        int capacity, n, pages[];
        // int pages[] = {1, 2, 3, 4, 2, 1, 5, 6, 2, 1, 2, 3, 7, 6, 3, 2, 1, 2, 3, 6};
        Optimal optimal = new Optimal();

        System.out.print("Enter capacity of page frame: "); 
        capacity = scanner.nextInt();

        System.out.print("Enter number of page sequence: ");
        n = scanner.nextInt();

        pages = new int[n];

        System.out.print("Enter values (space separated): ");
        for(int i = 0 ; i < n ; i++) {
         pages[i] = scanner.nextInt();
        }

        optimal.OptimalImplementation(pages, capacity);

    }   
}